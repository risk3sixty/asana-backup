{"version":3,"sources":["../src/libs/aws.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAA;AACjC,OAAO,GAAG,MAAM,SAAS,CAAA;AAKzB,eAAO,MAAM,EAAE,QAGb,CAAA;AAEF,wBAAsB,YAAY,CAChC,IAAI,EAAE,MAAM,EACZ,IAAI,EAAE,MAAM,GAAG,QAAQ,GAAG,MAAM;;;GAajC;AAED,wBAAgB,WAAW,CACzB,QAAQ,EAAE,MAAM,GAEf,MAAM,CAYR","file":"aws.d.ts","sourcesContent":["import assert from 'assert'\nimport path from 'path'\nimport { Readable } from 'stream'\nimport AWS from 'aws-sdk'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst DEFAULT_BUCKET = process.env.AWS_S3_BUCKET\n\nexport const s3 = new AWS.S3({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n})\n\nexport async function uploadObject(\n  name: string,\n  data: Buffer | Readable | string\n) {\n  const uniqueFilename = name // getFileName(name)\n\n  assert(DEFAULT_BUCKET, 'bucket should be set on default params')\n  const params: AWS.S3.PutObjectRequest = {\n    Bucket: DEFAULT_BUCKET,\n    Key: uniqueFilename,\n    Body: data,\n  }\n\n  const response = await s3.putObject(params).promise()\n  return { response, name: uniqueFilename }\n}\n\nexport function getFileName(\n  fileName: string\n  // extraText: number | string = Date.now()\n): string {\n  const filepathSplit = fileName.split('/')\n  const encodedFilename = encodeURIComponent(\n    filepathSplit[filepathSplit.length - 1]\n  )\n  // const finalName = `${encodedFilename\n  //   .split('.')\n  //   .slice(0, -1)\n  //   .join('.')}_${extraText}${path.extname(encodedFilename)}`\n  return `${filepathSplit\n    .slice(0, filepathSplit.length - 1)\n    .join('/')}/${uuidv4()}${path.extname(encodedFilename)}`\n}\n"]}